
params.help = ""
params.medaka_model = 'r941_min_high'

params {
    help = false
    out_dir = "output"
    fastq = null
    reference = null
    threads = 1
    medaka_model = "r941_prom_variant_g360"
    chunk_size = 1000000
    run_prokka = false
    prokka_opts = ""
    wfversion = "v0.2.1"
    aws_image_prefix = null
    aws_queue = null
}

executor {
    $local {
        cpus = 4
        memory = "8 GB"
    }
}

profiles {
    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
        process {
            withLabel:containerCPU {
                container = "ontresearch/wf-hap-snps:${params.wfversion}"
            }
        }
        process {
            withLabel:prokka {
                container = "ontresearch/prokka:latest"
            }
        }
    }
    
    // profile using conda environments rather than docker
    // containers
    conda {
        docker {
            enabled = false
        }
        process {
            withLabel:containerCPU {
                conda = "${projectDir}/environment.yaml"
            }
            withLabel:prokka {
                conda = "${projectDir}/environment_prokka.yaml"
            }
        }
        conda {
             cacheDir = ""
             useMamba = true
        }
    }

    awsbatch {
        process {
            executor = 'awsbatch'
            queue = "${params.aws_queue}"
            memory = '8G'
            withLabel:containerCPU {
                container = "${params.aws_image_prefix}-wf-hap-snps:${params.wfversion}"
            }
            withLabel:prokka {
                // TODO: fix this
                container = "ontresearch/prokka:latest"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }
    aws.region = 'eu-west-1'
    aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
}


timeline {
  enabled = true
  file = "${params.out_dir}/execution/timeline.html"
}
report {
  enabled = true
  file = "${params.out_dir}/execution/report.html"
}
trace {
  enabled = true
  file = "${params.out_dir}/execution/trace.txt"
}
dag {
  enabled = true
  file = "${params.out_dir}/execution/pipeline.svg"
}
