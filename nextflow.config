params.help = ""

params {
    help = false
    version = false
    analyse_unclassified = false
    out_dir = "output"
    fastq = null
    reference = null
    threads = 2
    chunk_size = 1000000
    run_prokka = true
    prokka_opts = null
    aws_image_prefix = null
    aws_queue = null
    sample = null
    sample_sheet = null
    disable_ping = false
    reference_based_assembly = false
    summarise_assemblies = true
    basecaller_cfg = "dna_r10.4.1_e8.2_400bps_hac"
    medaka_variant_model = null
    medaka_consensus_model = null

    monochrome_logs = false
    validate_params = true
    show_hidden_params = false
    analyse_unclassified = false
    schema_ignore_params = 'show_hidden_params,validate_params,monochrome_logs,aws_queue,aws_image_prefix,wf'

    wf {
      example_cmd = [
          "--fastq test_data/fastq",
          "--reference test_data/ref/reference.subseq.fa.gz",
          "--threads 4"
      ]
      container_sha = "sha68ca6d2de587e78ad0ffcb2c93e276bc0cbcedab"
      container_sha_prokka = "sha08669655982fbef7c750c7895e97e100196c4967"
      agent = null
    }
}

manifest {
    name            = 'epi2me-labs/wf-bacterial-genomes'
    author          = 'Oxford Nanopore Technologies'
    homePage        = 'https://github.com/epi2me-labs/wf-bacterial-genomes'
    description     = 'Assembly, variant calling, and annotation of bacterial genomes.'
    mainScript      = 'main.nf'
    nextflowVersion = '>=20.10.0'
    version         = 'v0.2.11'
}

epi2melabs {
  tags = "denovo,alignment,mosdepth"
  icon = "faBacterium"
}

executor {
    $local {
        cpus = 4
        memory = "8 GB"
    }
}

profiles {
    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
        process {
            withLabel:wfbacterialgenomes {
                container = "ontresearch/wf-bacterial-genomes:${params.wf.container_sha}"
            }
        }
        process {
            withLabel:prokka {
                container = "ontresearch/prokka:${params.wf.container_sha_prokka}"
            }
        }
    }

    // using singularity instead of docker
    singularity {
        singularity {
            enabled = true
            autoMounts = true
        }
        process {
            withLabel:wfbacterialgenomes {
                container = "ontresearch/wf-bacterial-genomes:${params.wf.container_sha}"
            }
        }
        process {
            withLabel:prokka {
                container = "ontresearch/prokka:${params.wf.container_sha_prokka}"
            }
        }
    }

    conda {
        conda.enabled = true
    }

    awsbatch {
        process {
            executor = 'awsbatch'
            queue = "${params.aws_queue}"
            memory = '8G'
            withLabel:wfbacterialgenomes {
                container = "${params.aws_image_prefix}-wf-bacterial-genomes:${params.wf.container_sha}-root"
            }
            withLabel:prokka {
                // TODO: fix this
                container = "${params.aws_image_prefix}-prokka:${params.wf.container_sha_prokka}-root"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }
    aws.region = 'eu-west-1'
    aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
}


timeline {
  enabled = true
  file = "${params.out_dir}/execution/timeline.html"
}
report {
  enabled = true
  file = "${params.out_dir}/execution/report.html"
}
trace {
  enabled = true
  file = "${params.out_dir}/execution/trace.txt"
}

env {
    PYTHONNOUSERSITE = 1
}
