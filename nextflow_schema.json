{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/./master/nextflow_schema.json",
    "title": "epi2me-labs/wf-bacterial-genomes",
    "description": "Assembly, variant calling, and annotation of bacterial genomes.",
    "demo_url": "https://ont-exd-int-s3-euwst1-epi2me-labs.s3.amazonaws.com/wf-bacterial-genomes/wf-bacterial-genomes-demo.tar.gz",
    "url": "https://github.com/epi2me-labs/wf-bacterial-genomes",
    "type": "object",
    "definitions": {
        "input": {
            "title": "Input Options",
            "type": "object",
            "fa_icon": "fas fa-arrow-right",
            "description": "Parameters for finding and handling input data for analysis.",
            "properties": {
                "fastq": {
                    "type": "string",
                    "format": "path",
                    "description": "FASTQ files to use in the analysis.",
                    "help_text": "This accepts one of three cases: (i) the path to a single FASTQ file; (ii) the path to a top-level directory containing FASTQ files; (iii) the path to a directory containing one level of sub-directories which in turn contain FASTQ files. In the first and second case, a sample name can be supplied with `--sample`. In the last case, the data is assumed to be multiplexed with the names of the sub-directories as barcodes. In this case, a sample sheet can be provided with `--sample_sheet`."
                },
                "reference_based_assembly": {
                    "type": "boolean",
                    "help_text": "By default de-novo assembly will be performed with Flye. Enable this to instead perform a reference-based consensus. A reference must be provided.",
                    "description": "Enable reference guided assembly instead of de-novo assembly."
                },
                "reference": {
                    "type": "string",
                    "format": "file-path",
                    "description": "Reference sequence FASTA file.",
                    "help_text": "The reference sequence is used when performing reference-based assembly and may we used as a benchmark for de-novo assemblies."
                },
                "summarise_assemblies": {
                    "type": "boolean",
                    "hidden": true,
                    "description": "Hidden for now because report code needs updating. Produce summary statistics and compare to standard reference databases.",
                    "help_text": "Runs MetaQUAST with default parameters. Assemblies with be compared to the 16S SILVA database for analysis of sequence content."
                },
                "basecaller_cfg": {
                    "type": "string",
                    "description": "Name of the model that was used to basecall signal data, used to select an appropriate Medaka model.",
                    "help_text": "The basecaller configuration is used to automatically select the appropriate Medaka model. The automatic selection can be overridden with the 'medaka_variant_model' and 'medaka_consensus_model' parameters. The model list only shows models that are compatible with this workflow.",
                    "default": "dna_r10.4.1_e8.2_400bps_hac",
                    "enum": [
                        "dna_r10.4.1_e8.2_400bps_hac@v3.5.2",
                        "dna_r10.4.1_e8.2_400bps_sup@v3.5.2",
                        "dna_r9.4.1_e8_fast@v3.4",
                        "dna_r9.4.1_e8_hac@v3.3",
                        "dna_r9.4.1_e8_sup@v3.3",
                        "dna_r10.4.1_e8.2_400bps_hac_prom",
                        "dna_r9.4.1_450bps_hac_prom",
                        "dna_r10.3_450bps_hac",
                        "dna_r10.3_450bps_hac_prom",
                        "dna_r10.4.1_e8.2_260bps_hac",
                        "dna_r10.4.1_e8.2_260bps_hac_prom",
                        "dna_r10.4.1_e8.2_400bps_hac",
                        "dna_r9.4.1_450bps_hac",
                        "dna_r9.4.1_e8.1_hac",
                        "dna_r9.4.1_e8.1_hac_prom"
                    ]
                },
                "analyse_unclassified": {
                    "type": "boolean",
                    "description": "Analyse unclassified reads from input directory. By default the workflow will not process reads in the unclassified directory.",
                    "help_text": "If selected and if the input is a multiplex directory the workflow will also process the unclassified directory."
                }
            },
            "required": [
                "fastq",
                "basecaller_cfg"
            ]
        },
        "samples": {
            "title": "Sample Options",
            "type": "object",
            "fa_icon": "fas fa-vials",
            "description": "Parameters that relate to samples such as sample sheets and sample names.",
            "properties": {
                "sample_sheet": {
                    "type": "string",
                    "format": "file-path",
                    "description": "A CSV file used to map barcodes to sample aliases. The sample sheet can be provided when the input data is a directory containing sub-directories with FASTQ files.",
                    "help_text": "The sample sheet is a CSV file with, minimally, columns named `barcode` and `alias`. Extra columns are allowed. A `type` column is required for certain workflows and should have the following values; `test_sample`, `positive_control`, `negative_control`, `no_template_control`."
                },
                "sample": {
                    "type": "string",
                    "description": "A single sample name for non-multiplexed data. Permissible if passing a single .fastq(.gz) file or directory of .fastq(.gz) files."
                }
            }
        },
        "output": {
            "title": "Output Options",
            "type": "object",
            "fa_icon": "fas fa-arrow-left",
            "description": "Parameters for saving and naming workflow outputs.",
            "properties": {
                "out_dir": {
                    "type": "string",
                    "default": "output",
                    "format": "directory-path",
                    "description": "Directory for output of all workflow results."
                }
            }
        },
        "advanced_options": {
            "title": "Advanced Options",
            "type": "object",
            "fa_icon": "far fa-question-circle",
            "description": "Advanced options for configuring processes inside the workflow.",
            "help_text": "These advanced options do not need to be changed for typical use, but allow fine tuning of workflows for users who want more control over the workflow.",
            "properties": {
                "chunk_size": {
                    "type": "integer",
                    "default": 1000000,
                    "description": "Splits the reference sequences (or Flye assembly) into overlapping sub-regions of this size when processing with Medaka.",
                    "hidden": true
                },
                "run_prokka": {
                    "type": "boolean",
                    "description": "Run prokka on consensus sequence",
                    "default": true,
                    "help_text": "Will provide an output file with a list of annotations for your sequence. Optional because it can take some time."
                },
                "prokka_opts": {
                    "type": "string",
                    "description": "Command-line arguments for prokka",
                    "help_text": "[Command line arguments](https://github.com/tseemann/prokka#command-line-options) which can be used to alter prokka output annotation files."
                },
                "threads": {
                    "type": "integer",
                    "default": 2,
                    "description": "Number of CPU threads.",
                    "help_text": "Provided to alignment, flye assembly and prokka steps to improve performance."
                },
                "medaka_consensus_model": {
                    "type": "string",
                    "description": "The name of a Medaka consensus model to use. This name will override the model automatically chosen based on the provided basecaller configuration.",
                    "help_text": "The workflow will attempt to map the basecalling model used to a suitable Medaka consensus model. You can override this by providing a model with this option instead."
                },
                "medaka_variant_model": {
                    "type": "string",
                    "description": "The name of a Medaka variant model to use. This name will override the model automatically chosen based on the provided basecaller configuration.",
                    "help_text": "The workflow will attempt to map the basecalling model used to a suitable Medaka variant model. You can override this by providing a model with this option instead."
                }
            }
        },
        "misc": {
            "title": "Miscellaneous Options",
            "type": "object",
            "description": "Everything else.",
            "default": "",
            "properties": {
                "disable_ping": {
                    "type": "boolean",
                    "description": "Enable to prevent sending a workflow ping."
                },
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input"
        },
        {
            "$ref": "#/definitions/samples"
        },
        {
            "$ref": "#/definitions/output"
        },
        {
            "$ref": "#/definitions/advanced_options"
        },
        {
            "$ref": "#/definitions/misc"
        }
    ],
    "properties": {
        "aws_image_prefix": {
            "type": "string",
            "hidden": true
        },
        "aws_queue": {
            "type": "string",
            "hidden": true
        },
        "monochrome_logs": {
            "type": "boolean",
            "hidden": true
        },
        "validate_params": {
            "type": "boolean",
            "default": true,
            "hidden": true
        },
        "show_hidden_params": {
            "type": "boolean",
            "hidden": true
        }
    },
    "docs": {
        "intro": "# Introduction\n\nIf no reference is included assembly will be \ncompleted using [flye](https://github.com/fenderglass/Flye) and polished with \n[medaka](https://www.github.com/nanoporetech/medaka). If a reference is provided\nalignment will be done with [mini_align](https://github.com/nanoporetech/pomoxis/blob/master/scripts/mini_align)\nand variant called using medaka. The workflow can optionally run\n[prokka](https://github.com/tseemann/prokka) to annotate the resulting\nconsensus sequence.\n",
        "links": "## Useful links\n\n* [nextflow](https://www.nextflow.io/)\n* [docker](https://www.docker.com/products/docker-desktop)"
    }
}