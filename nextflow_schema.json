{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/./master/nextflow_schema.json",
    "title": "epi2me-labs/wf-bacterial-genomes",
    "description": "Assemble or align whole bacterial genomes and annotate.",
    "url": "https://github.com/epi2me-labs/wf-bacterial-genomes",
    "type": "object",
    "definitions": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "properties": {
                "fastq": {
                    "type": "string",
                    "format": "path",
                    "description": "Path to FASTQ directory. Can be either a single file or contain multiple directories."
                },
                "out_dir": {
                    "type": "string",
                    "default": "output",
                    "description": "Path for output"
                },
                "sample_sheet": {
                    "type": "string",
                    "format": "file-path",
                    "description": "CSV file with columns named `barcode`, `sample_name` and `type`. Permissible if passing a directory containing barcodeXX sub-directories.",
                    "help_text": "If no sample sheet is provided, the names of the directories will be used as sample names."
                },
                "sample": {
                    "type": "string",
                    "description": "A sample name for non-multiplexed data. Permissible if passing a file or directory of .fastq(.gz)."
                }
            },
            "required": [
                "fastq"
            ]
        },
        "reference_genome_options": {
            "title": "Reference genome options",
            "type": "object",
            "fa_icon": "fas fa-dna",
            "description": "Reference genome related files and options required for the workflow.",
            "properties": {
                "medaka_model": {
                    "type": "string",
                    "default": "r941_prom_variant_g360",
                    "description": "Medaka model name",
                    "help_text": "The correct medaka model to use is determined by the Guppy basecaller version, see [Medaka Models](https://github.com/nanoporetech/medaka#models) for more information."
                },
                "reference": {
                    "type": "string",
                    "description": "Reference sequence FASTA file. If provided this will be used to perform variant calling with Medaka. If not given the denovo assembly will be performed with Flye and Medaka."
                }
            },
            "required": [
                "medaka_model"
            ]
        },
        "advanced_options": {
            "title": "Advanced options",
            "type": "object",
            "fa_icon": "fab fa-acquisitions-incorporated",
            "help_text": "",
            "properties": {
                "genome_size": {
                    "type": "integer",
                    "default": 5000000,
                    "description": "Estimated genome size to be used in assembly"
                },
                "sanitize_fastq": {
                    "type": "string",
                    "description": "Use additional heuristics to identify barcodes from file paths\"",
                    "help_text": "Enabling this option will group together files into samples by the presence of strings of the form `barcodeXXX` present in filenames, rather than simply files grouped into directories (as output by MinKNOW and the Guppy basecaller)"
                },
                "chunk_size": {
                    "type": "integer",
                    "default": 1000000,
                    "description": "Splits the reference sequences (or Flye assembly) into overlapping sub-regions of this size when processing with Medaka.",
                    "hidden": true
                },
                "prokka_opts": {
                    "type": "string",
                    "description": "Command-line arguments for prokka"
                },
                "prokka_version": {
                    "type": "string",
                    "default": "1.14.5",
                    "description": "Prokka version to use"
                },
                "run_prokka": {
                    "type": "boolean",
                    "description": "Run prokka on consensus sequence",
                    "default": true
                },
                "disable_ping": {
                    "type": "boolean",
                    "description": "Enable to prevent sending a workflow ping."
                }
            }
        },
        "meta_data": {
            "title": "Meta data",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "report_name": {
                    "type": "string",
                    "default": "report",
                    "description": "Optional report suffix"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "",
            "help_text": "",
            "properties": {
                "aws_queue": {
                    "type": "string",
                    "hidden": true
                },
                "threads": {
                    "type": "integer",
                    "default": 1,
                    "description": "Number of threads per process."
                },
                "aws_image_prefix": {
                    "type": "string",
                    "hidden": true
                },
                "wfversion": {
                    "type": "string",
                    "default": "v0.2.4",
                    "hidden": true
                },
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle"
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/reference_genome_options"
        },
        {
            "$ref": "#/definitions/advanced_options"
        },
        {
            "$ref": "#/definitions/meta_data"
        },
        {
            "$ref": "#/definitions/generic_options"
        }
    ],
    "docs": {
        "intro": "# Introduction\n\nIf no reference is included assembly will be \ncompleted using [flye](https://github.com/fenderglass/Flye) and polished with \n[medaka](https://www.github.com/nanoporetech/medaka). If a reference is provided\nalignment will be done with [mini_align](https://github.com/nanoporetech/pomoxis/blob/master/scripts/mini_align)\nand variant called using medaka. The workflow can optionally run\n[prokka](https://github.com/tseemann/prokka) to annotate the resulting\nconsensus sequence.\n",
        "links": "## Useful links\n\n* [nextflow](https://www.nextflow.io/)\n* [docker](https://www.docker.com/products/docker-desktop)\n* [conda](https://docs.conda.io/en/latest/miniconda.html)"
    }
}